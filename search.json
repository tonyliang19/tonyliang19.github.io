[
  {
    "objectID": "demos/R/fit_lr.html",
    "href": "demos/R/fit_lr.html",
    "title": "Fit a LR model",
    "section": "",
    "text": "R is good in the stat, bio side.\n\n\n\n\n\n\nNote\n\n\n\nNote that below is not fully developed.\n\n\nHere are some examples of R codes:\nHave all setups like loading library in one block of code\n\n\nCode\n# load library\nlibrary(tidyverse)\n\n\n\nCalculating mean of a vector of length n\n\n\nCode\nn &lt;- 10\nx &lt;- rnorm(n=n)\nprint(mean(x))\n\n\n[1] -0.08886005\n\n\n\nFitting a simple linear regression model\n\n\nCode\n# create dummy data\nn &lt;- 25\nx1 &lt;- rnorm(n=n, mean=2, sd=3)\nx2 &lt;- rnorm(n=n, mean=3, sd=2)\ny &lt;- 2*x1 + 3*x2\ndata &lt;- data.frame(x1 = x1, x2 = x2, y = y)\n\n#&gt; fit model and print fitted coefficients\nreg &lt;- lm(y ~ . , data=data)\nprint(reg$coefficients)\n\n\n(Intercept)          x1          x2 \n          0           2           3 \n\n\n\nPlot the model\n\n\nCode\nfit &lt;- reg\np &lt;- ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) + \n  geom_point() +\n  stat_smooth(method = \"lm\", col = \"red\") +\n  labs(title = paste(\"Adj R2 = \",signif(summary(fit)$adj.r.squared, 5),\n                     \"Intercept =\",signif(fit$coef[[1]],5 ),\n                     \" Slope =\",signif(fit$coef[[2]], 5),\n                     \" P =\",signif(summary(fit)$coef[2,4], 5)))\n\np\n\n\n\n\n\nFigure 1: Simple Linear Regression on dummy data\n\n\n\n\nThe Figure 1 shows the fitted regression line on the dummy data"
  },
  {
    "objectID": "demos/python/python_demo.html",
    "href": "demos/python/python_demo.html",
    "title": "Python Code Demo",
    "section": "",
    "text": "Why everyone use Python?"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Tony Liang",
    "section": "",
    "text": "FIFA 22 Ultimate Team Recommender \n\nThis project uses Python beautifulSoup and requests to scrap FIFA player data from an open source website SoFIFA then fit unsupervised model to player statistics to setup a recommender (With UI) of players in FIFA22 given user inputs as constraints eg. budget, potential, attribute and etc in an automated pipeline manner.\n\n\n\nPollen Image Recognition \nThis project uses a convolutional neural network based library detectron2 (Wu et al. 2019) to recognize pollens from high resolution custom annotated pictures and further classify different species of pollen with deep learning approach.\n\n\n\nMock University Enrollment App \nThis project uses Python Flask and database mongoDB to mock university enrollment, and to experiment process of web development, interactions of front-end and back-end data from nonSQL database through RESTful API.\n\n\n\n\n\nReferences\n\nWu, Yuxin, Alexander Kirillov, Francisco Massa, Wan-Yen Lo, and Ross Girshick. 2019. “Detectron2.” https://github.com/facebookresearch/detectron2."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tony Liang",
    "section": "",
    "text": "My name is Tony Liang, currently undergraduate Math and Statistics Student at University of British Columbia (UBC) in Vancouver, Canada. I am originally from Kaiping, China (here). But, I have spent most of the times living in Santo Domingo, Dominican Republic. So I know how to hablar en español, pero un poquito machucado.\n当然中文也会一点点(这已经是我所有的水平了)。\nLast updated at 2023-06-10 16:40:28\nPlease dont’t hesitate to contact me or just to chat, you could open any of my links above."
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Tony Liang",
    "section": "Experience",
    "text": "Experience\n\nMachine Learning Developer, Sep 2022 - Present\nCentre of Heart Lung Innovation, St Paul’s Hospital, Vancouver, CA\nUndergraduate Teaching Assistant, Sep 2022 - Present\nDepartment of Statistics, University of British Columbia, Vancouver, CA\nComputational Entomology Research Assistant, May 2022 - Sep 2022\nDepartment of Land Food and Systems, University of British Columbia, Vancouver, CA"
  },
  {
    "objectID": "index.html#interests",
    "href": "index.html#interests",
    "title": "Tony Liang",
    "section": "Interests",
    "text": "Interests\n\nBioinformatics\nMulti-omics\nReproducibile Workflows\nData Analysis\nMachine Learning\nMathematical Science"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Tony Liang",
    "section": "Education",
    "text": "Education\n\n B.Sc. in Mathematics and Statistics and Minor in Data Science, Sep 2020 - Nov 2023\nUniversity of British Columbia, Vancouver, CA"
  },
  {
    "objectID": "resume/index.html",
    "href": "resume/index.html",
    "title": "Tony Liang",
    "section": "",
    "text": "Download current resume"
  },
  {
    "objectID": "notes/shell/index.html",
    "href": "notes/shell/index.html",
    "title": "Shell",
    "section": "",
    "text": "Shell is a program where users type commands, and directly interact with system. It is usually done through command line interface (CLI). And, it’s also scripting language just like Python or Java.\nTypically uses $ as prompt, followed by a text cursor, and some word to indicate an executable binary:\n$ ls # This is a built-in command/binary for Bash shells\nMost shells present in different OS are:\n\nPowershell in Windows\nZsh in MacOS\nBash in Linux"
  },
  {
    "objectID": "notes/shell/index.html#basic-information",
    "href": "notes/shell/index.html#basic-information",
    "title": "Shell",
    "section": "",
    "text": "Shell is a program where users type commands, and directly interact with system. It is usually done through command line interface (CLI). And, it’s also scripting language just like Python or Java.\nTypically uses $ as prompt, followed by a text cursor, and some word to indicate an executable binary:\n$ ls # This is a built-in command/binary for Bash shells\nMost shells present in different OS are:\n\nPowershell in Windows\nZsh in MacOS\nBash in Linux"
  },
  {
    "objectID": "notes/shell/index.html#frequently-used-commands",
    "href": "notes/shell/index.html#frequently-used-commands",
    "title": "Shell",
    "section": "2 Frequently used commands",
    "text": "2 Frequently used commands\n\n2.1 Navigating Files and Directories\n\npwd: prints current working directory\nls: list files in current directory (by default), accepts optional argument\ncd: change working directory\n\n\n\n2.2 Others:\n\ndu -sh &lt;path_of_dir&gt; : show size of a directory"
  },
  {
    "objectID": "notes/conda/index.html",
    "href": "notes/conda/index.html",
    "title": "Conda",
    "section": "",
    "text": "This page contains useful commands/tips for conda usage"
  },
  {
    "objectID": "notes/conda/index.html#frequently-used-commands",
    "href": "notes/conda/index.html#frequently-used-commands",
    "title": "Conda",
    "section": "1 Frequently used commands",
    "text": "1 Frequently used commands\n\n\nCode\n# Deletes the ENV_NAME along with all its packages\n# (This one requiers you to confirm yes)\nconda remove -n ENV_NAME --all \nconda remove -n ENV_NAME --all -y # This one do not ask for confirmation\n\n\n\n\nCode\n# List all environments\nconda env list\n\n\n\n\nCode\n# creates ENV_NAME could use either with -n or --name\nconda create -n | --name -y ENV_NAME"
  },
  {
    "objectID": "notes/conda/index.html#combine-usage-with-jupyterlab",
    "href": "notes/conda/index.html#combine-usage-with-jupyterlab",
    "title": "Conda",
    "section": "2 Combine usage with JupyterLab",
    "text": "2 Combine usage with JupyterLab\nJupyterLab enables you to use interactive kernels of conda, such that each of the kernel could have a conda manager and pip manager. And, there are two frequent kernels: - ipykernel - iRkernel\nIt is recommended to separate Python and R kernel usages, say have different conda environments for each individual Python/R kernel. And, having nb_conda_kernels in the environment that you launch Jupyter Notebook or JupyterLab.\nFor example, this is how I use it:\n\nInstall nb_conda_kernels in the conda environment that has jupyter lab, in my case, I use the base env.\nCreate new conda envs for the projects that I do:\n\n\nconda create -n -y python_proj ipyerkernel For Python\nconda craete -n -y r_proj r-irkernel For R\n\n\nLaunch jupyter lab from base (by staying at base env), then when it launches you will be able to see the following: \nLastly, just choose the environment you are going to use\n\nIf you want to install packages to specified environments, do the following:\n\nconda activate ENV_NAME , replace ENV_NAME of the one you like to deal and mess around with\nconda install -y PKG_NAME or pip install PKG_NAME, install the packages you need depending on where they are supported (NOTE: It supports most python packages, but not quite for R packages). If you like to use more R packages, I recommend Docker or renv."
  },
  {
    "objectID": "notes/make/index.html",
    "href": "notes/make/index.html",
    "title": "Makefile",
    "section": "",
    "text": "This is quite note for Makefile, explaining how to make a sample Makefile that could automate some of the repetitive actions that you carry throught your codes and projects.\n\n# A sample Makefile look like this\n\ntarget_name: &lt;any optional dependencies that this target depends on&gt;\n    \n    action_a\n    action_b\n    action_n\n\n# This means that the &lt;target_name&gt; is to be carried and do not rely on other stuffs\n.PHONY: target_name\ntarget_name:\n    action_a\n    action_b\n    action_n\nNOTE: special notation requires when you need to access other variables through $ or evaluating bash expression like $()\nAnd that is you need a second $ like or use the make’s built-in shell: - docker container rm $$(docker ps -aq) -f and NOT docker container rm $(docker ps -aq) -f + So you likely see this when you believe your command is correct but you see an error like: requires at least 1 argument.\n\ndocker container rm $(shell docker ps -aq) -f The reason why this happens is because the single $ is expanded as Makefile variable when the Makefile is parsed. It expands to blank. And the second $ sign causes make to expand $$ to $ which is then the correct usage.\n\nAnd the second usage is to prepend the command at stake with Make’s shell builtin"
  },
  {
    "objectID": "notes/git/index.html",
    "href": "notes/git/index.html",
    "title": "Git",
    "section": "",
    "text": "This page will explain some very frequent usage of Git and solutions for common known issues."
  },
  {
    "objectID": "notes/git/index.html#usual-workflow",
    "href": "notes/git/index.html#usual-workflow",
    "title": "Git",
    "section": "1 Usual Workflow",
    "text": "1 Usual Workflow\nEdit your .gitignore frequently, track stuffs that needs version control, but not those are confidential like secrets, credentials. Moreover, keep your files below 100MB each as possible. And you will be doing the following a lot:\n\ngit add . or git add &lt;path_to_dir-or-file&gt;.\n\nThe first one is to add everything to ready for commit, use it carefully, sometimes you don’t want to add everything (as mentioned above)\nIf you need to add dir itself that is another git repo, go to this section\nuse git add -f &lt;file&gt; if you have to add a file mandatorily, usually this is applied in ignore folders, but certain files like README.md within that dir need to be included.\n\ngit commit -m \"any meaningful message within this quotation\", the message is for you to know what have you done in one commit (or checkpoint if you prefer this), like update README.md, looping in a bug, fix later\n\nThe message is then fixed to the file that you committed with like below:  As you can see, the circled red is all messages that’s accompanied by the file modified in that commit particularly.\n\ngit push &lt;branch-name&gt; or git push -u origin &lt;branch-name&gt;.\n\nThe first one is to tell which branch you want to push the commit(s) onto github.\nThe second one is usually done for a first time created branch on local, meaning that’s likely not on the remote yet. So, this essentially tells git, if the &lt;branch-name is not on remote yet, create it on the remote, and set the local branch-name to track this upstream remote branch (meaning everything time you switch into the local branch, by default it tracks the same remote branch on github for pull/fetch/push)"
  },
  {
    "objectID": "notes/git/index.html#adding-a-git-repo-inside-another-git-repo",
    "href": "notes/git/index.html#adding-a-git-repo-inside-another-git-repo",
    "title": "Git",
    "section": "2 Adding a git repo inside another git repo",
    "text": "2 Adding a git repo inside another git repo\nSay you have a big repo that contains many other sub-repos, this is called a git submodule, whereas you could have like a following structure:\nBig_repo\n|-------         Sub-repo 1 \n|-------         Sub-repo 2\n|-------         .....\n|-------         Sub-repo n\nThis allows you to version control within each the sub-repo with its own history, and the Big_repo just gives you access to each the repository link of it as shown below:\n\nWhere each of the blue highlighted are a sub-repo, that links to another GitHub repo (that you can actually click on it! :blush:), the xxxxxxx next to the link is the hash of latest commit of that repo.\nTo add submodules, you required the sub-modules to rely within sub-directories of the major repo, and use below:\ngit submodule add &lt;remote-link-of-sub-repo&gt; &lt;local-path-to-the-sub-repo&gt;"
  },
  {
    "objectID": "notes/git/index.html#changing-ssh-to-https-or-vice-versa",
    "href": "notes/git/index.html#changing-ssh-to-https-or-vice-versa",
    "title": "Git",
    "section": "3 Changing SSH to HTTPS or Vice-versa",
    "text": "3 Changing SSH to HTTPS or Vice-versa\nIf you want to change from HTTPS to SSH, i.e. you want to see the remote url link not just ssh. Or the other way round, when you are sick of authenticating over and over again using personal access token (PAT). Use the following to config the .gitconfig file:\ngit config --global url.https://.insteadOf git:// + This tells Git to automatically translate any remote beginning with git:// to remote beginning with https://\ngit config --global url.git://.insteadOf https:// + This tells Git to automatically translate any remote beginning with https:// to remote beginning with git://\nTo do sanity check, use to following command to check the .gitconfig file has updated correctly:\ngit config --global --list, this list all options/configurations that you have, and NOTE, this file affects all git repos you have locally on your laptop/computer. And it should like the below:\n\nAnd ,this is the file itself"
  },
  {
    "objectID": "notes/git/index.html#hub-cli",
    "href": "notes/git/index.html#hub-cli",
    "title": "Git",
    "section": "4 Hub CLI",
    "text": "4 Hub CLI\nThis hub is a command-line-interface (CLI) made by GitHub, that allows to do almost everything of git and GitHub without leaving the terminal, for example, this allows to create a repo on GitHub, add issues, and many mores.\n\n4.1 Creating a repository\nYou might be tired of creating empty repositories on GitHub that need to leave your favorite terminal and use the mouse? Why not just do everything with your terminal :smirk:\nNOTE: For the first time using this, it might asks you for credentials like github username and github password, but actually you need to put in the Personal Access Token(PAT)\nIf you don’t know how to add it, look at here\nFollow these steps: 1. cd into the directory you want to be a git repo 2.hub create -p or hub create + This creates a GitHub repository NOT git (this is done in step 1) + The first one creates the repo as private-only (only you have access) + The second one is standard public repo + Note: it creates an empty repo with no README or .gitignore templates, you might need to add more options to the command above\nAnd it should look like this: \nThe https://... is the actual url to the github repo created, try copy that to your browser, and see what’s in there, then you can just follow the instructions on that website or here"
  },
  {
    "objectID": "notes/git/index.html#edit-hub-config",
    "href": "notes/git/index.html#edit-hub-config",
    "title": "Git",
    "section": "5 Edit hub config",
    "text": "5 Edit hub config\nThis teaches you how to edit the hub cli config file, that should live on this path, ~/.config/hub, where ~ assumes to be your $HOME. And the file itself looks like this:\n\nWhere you could find your github username, github PAT (The light blue highlight I have here), and whatever protocol you use (default is https, and apparently it only supports https? You could verify that if you wish to know more)"
  },
  {
    "objectID": "notes/linux/cheatsheet.html",
    "href": "notes/linux/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "This page contains useful? or maybe essential tips for Linux usage. Still under development"
  },
  {
    "objectID": "notes/linux/cheatsheet.html#change-passwords-for-users",
    "href": "notes/linux/cheatsheet.html#change-passwords-for-users",
    "title": "Cheatsheet",
    "section": "1 Change passwords for users",
    "text": "1 Change passwords for users\nThe bash passwd command is used to change password for user in the system,altough you need sudo access to do so:\npasswd [username]\nIf no username where provided, it would change the password for the current log-on user."
  },
  {
    "objectID": "notes/linux/cheatsheet.html#linux-install-package-guide",
    "href": "notes/linux/cheatsheet.html#linux-install-package-guide",
    "title": "Cheatsheet",
    "section": "2 Linux Install Package guide",
    "text": "2 Linux Install Package guide\nTo install package in Linux, i.e. *.rpm packages through terminal, use the Alien utility like below:\nFirst copy the *.rpm file to WSL:\ncp /mnt/c/Users/&lt;your_username&gt;/Downloads/&lt;the_package.rpm&gt; ~, where ~ should be the root path or /home/username of the WSL\nthen in your WSL terminal:\napt-get install alien dpkg-dev debhelper build-essential\nNOTE: This above might ask you to use sudo access, simply add sudo before the command: sudo apt-get ... build-essential.\nThen after installing alien, prompt in the following:\nalien &lt;package_name&gt;.rpm\nAnd finally install it:\ndpkg -i package_name.deb\n\n2.1 Upgrade packages\nUse the following command to see if there are any package upgradable:\napt list --upgradable\nAnd to update those packages:\napt-get upgrade, after this command, it would ask you to upgrade or not [Y/n] and telling you any additional spaces it might requires\n\n\n2.2 Issues in installing\nIf your apt-get install &lt;package_name&gt; is failing, check if you have any typo, CASE_SENSITVE, otherwise update your apt by:\nsudo apt update"
  },
  {
    "objectID": "notes/linux/other.html",
    "href": "notes/linux/other.html",
    "title": "Other",
    "section": "",
    "text": "Test page"
  },
  {
    "objectID": "notes/ssh/index.html",
    "href": "notes/ssh/index.html",
    "title": "SSH",
    "section": "",
    "text": "This is cheasheet/quicknote to connect and access remote servers through ssh."
  },
  {
    "objectID": "notes/ssh/index.html#check-your-existing-key",
    "href": "notes/ssh/index.html#check-your-existing-key",
    "title": "SSH",
    "section": "1 Check your existing key",
    "text": "1 Check your existing key\nEnter this command in your temrinal:\nls -al ~/.ssh\nThis checks if you have any existing ssh key-pairs, with something like:\n\nid_rsa.pub\nid_ecdsa.pub\nid_ed25519.pub\n\nNote: If you receive an error that ~/.ssh doesn’t exist, you do not have an existing SSH key pair in the default location. You can create a new SSH key pair in the next step."
  },
  {
    "objectID": "notes/ssh/index.html#add-your-key-to-other-hosts",
    "href": "notes/ssh/index.html#add-your-key-to-other-hosts",
    "title": "SSH",
    "section": "2 Add your key to other hosts",
    "text": "2 Add your key to other hosts\nTo authenticate with a remote-host using your public SSH key you will use the ssh-copy-id command. Use the -i flag to specify the public key to copy to the remote-host.\nEnter this command in you terminal, replacing &lt;username@host&gt;:\nssh-copy-id -i ~/.ssh/id_rsa.pub &lt;username@host&gt;\nThis command copies your public key from your local laptop/PC to the remote servers you want. After successfully copied, you will be asked for the following:\n$(username@host) Enter your password:\nAnd you only need to enter this for the “last” time, after that you could just do ssh username@host without typing password anymore. Moreover, you could also, use the shorthand by replacing to a host alias in a config file under ~/.ssh (See below section) Note: 2 Factor-Authentication (2FA) is not avoidable."
  },
  {
    "objectID": "notes/ssh/index.html#making-alias-for-your-known-host-servers",
    "href": "notes/ssh/index.html#making-alias-for-your-known-host-servers",
    "title": "SSH",
    "section": "3 Making alias for your known host servers",
    "text": "3 Making alias for your known host servers\nIf you want to avoid typing out whole host and ip address of your servers, try the following:\n\ncreate a file (if not extists yet) with touch ~.ssh/config\nUse the template below to add the server you like to connect to:\n\n\n# Indentation is required\n\n# Host is the alias shorthand you want to be ugin later like:\n\n# ssc &lt;Host&gt; , i.e. ssh foo\nHost &lt;the-alias-you-want-to-use&gt;\n    # The HostName is some domain like abc.cd.ef.gh, usually like a email link?\n    HostName &lt;this.should.be.domain&gt;\n    # User is the allocated user with permission alonsgside with the HostName\n    User tliang19\n\n# ideally like ssh User@HostName to ssh Host"
  },
  {
    "objectID": "notes/docker/index.html",
    "href": "notes/docker/index.html",
    "title": "Docker",
    "section": "",
    "text": "This page stores some useful commands (with explanation) and things that you might not know about Docker!"
  },
  {
    "objectID": "notes/docker/index.html#push-local-build-image",
    "href": "notes/docker/index.html#push-local-build-image",
    "title": "Docker",
    "section": "1 Push Local Build Image",
    "text": "1 Push Local Build Image\nIf you want to push your locally built docker image, use the following steps:\n\nDocker build . -t &lt;name_local_image&gt;\nDocker login # This is required to authenticate first\nDocker tag &lt;name_local_image&gt; &lt;docker_username/repo_name&gt;\nDocker push &lt;docker_username/repo_name&gt;"
  },
  {
    "objectID": "notes/markdown/index.html",
    "href": "notes/markdown/index.html",
    "title": "Markdown Syntax Guide",
    "section": "",
    "text": "This is a guide that’s also written in Markdown, a guide that has some important and useful syntax for markdown if you can’t remember it all:\nBefore starting, I will use md to denote markdown"
  },
  {
    "objectID": "notes/markdown/index.html#making-tables",
    "href": "notes/markdown/index.html#making-tables",
    "title": "Markdown Syntax Guide",
    "section": "1 Making tables",
    "text": "1 Making tables\nIf you need to code out tables in md, like to represent some csv like object or anything that needs table, try the following:\n\n\n\n\n\n\n\n\n\nHeader for column 1\nHeader for column 2\n….\nHeader for column n\n\n\n\n\nThis text is left-aligned\nThis text is center-aligned\nThis one nothing\nThis one is right-aligned\n\n\n1\n2\n3\n4\n\n\n\nNotice above, creating table is easy, simply use:\n\n### First row is always header or column name, and it should be spanned like\n\n| &lt;col_name here&gt; | , use two bars to separate\n\n### Then the next row is to determine how that column's content is to be aligned\n### By Default it is left-aligned\n\n| ----- | , the amount of - doesnt matter, markdown automatically fixes for you when rendered\n\nThis above is to do left aligned and equivalent to | :--- |, again amount of - DO NOT matter\n\nCenter-aligned:\n\n| :----: | , you need `-` wrap in two `:`. one left and one right just like `:-:`\n\nRight-aligned:\n\n| -----: |, you need `-` with `:` to the right of the `-`.\n\nThen you can just fill up the table as you like.\nIn summary, the “|-|” is used for indicate the table and “:” is used for indicate the text alignment. If |:-| entered that is a left aligned text column. If |-:| entered that is a right aligned text and if |:-:| entered that is a centre aligned."
  }
]